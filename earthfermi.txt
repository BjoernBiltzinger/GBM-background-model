Set-up of the problem:

earth at distance d, with earth radius R. (For Fermi, this means d ~ 6371+550 km, with R ~ 6371 km). We center the detector at the origin O and align the detector with the z-axis of a spherical coordinate system, and give it field of view opening angle theta_D. The direction to the earth center in this coordinate system is given by coordinates theta_E, phi_E. Without loss of generality we can put phi_E = 0

We need to know Omega, how much of the unit sphere surface is covered by the earth, and how much this overlaps with the field-of-view of the detector

We figure out how to trace the edge of the earth on the unit sphere. This will give the boundaries of the surface integral on the unit sphere, together with the requirement theta < theta_D. 

Points on the sphere of the earth are determined by | v - v_E | = R, where v a vector and v_E a vector that goes from origin O to the center of the earth. The distance between O and points for sightlines grazing the earth (i.e. the boundaries that we see on the sky) is given by l, for which d^2 = l^2 + R^2. Note that the angle between the sightline passing the point of grazing and the center of the earth is 90 degrees, hence the application of Pythagoras' theorem.

Because we don't care about points at a distance l, but at a distance 1 on the unit sphere, we rescale to | v - v_E | = R / l. For a point v on the unit sphere we have v = ( sin(theta) * cos(phi) , sin(theta) * sin(phi), cos(theta) ), where for v_E we have v_E = d/l * ( sin(theta_E), 0, cos(theta_E) ). Note that we had phi_E = 0, and v_E lies a little beyond the unit sphere. For a distant planet d ~ l and v_E would be on the unit sphere.

Solving the equation below ("equation 1")

(sin(theta) * cos(phi) - d / l * sin(theta_E) )^2 + sin(theta)^2 * sin(phi)^2 + (cos(theta) - d/l*cos(theta_E))^2 = R^2/l^2

gets a little messy but leads to (assuming no typo's):

cos(theta)^2 * (-4 * d^2 / l^2) * [cos(phi)^2 * sin(theta_E)^2 + cos(theta_E)^2] + cos(theta) * cos(theta_E) * 4 * d / l * [ 1 + d^2 / l^2 - R^2 / l^2] + 4 d^2 / l^2 * cos(phi)^2 + sin(theta_E)^2 - 1 - 2 * d^2 / l^2 + 2 * R^2 / l^2 - d^4 / l^4 + 2 * R^2 / l^2 * d^2 / l^2 - R^4 / l^4 = 0

I got this by writing my starting point such that I had the sin(theta) term isolated on the left, and then squaring both sides so that I had only cos(theta) and no more sin(theta) from using sin(theta)^2 + cos(theta)^2 = 1

The resulting equation is a quadratic equation in terms of cos(theta). Which can be solved to yield

cos(theta) = (-B +- sqrt(D)) / (2A) in the usual manner.

Now we integrate over a surface on the unit sphere

Omega = int( int( sin(theta), theta = theta0...theta1), phi=0...phi1) ->

Omega = int( -cos(theta1(phi)) + cos(theta0(phi)), phi = 0...phi1)

Here phi1 is determined by either the point where D is 0, or by solving equation 1 by substituting theta -> theta_D and phi -> phi1, whichever leads to lower phi1. In either case, it is just a number, a fixed boundary for purpose of solving the integral.

theta0 and theta1 are determined by the solutions to the quadratic equation and theta_D, such that

cos (theta_0) = min( (-B - sqrt(D)) / (2A), cos (theta_D) )
cos (theta_1) = min( (-B + sqrt(D)) / (2A), cos (theta_D) )

In a practical sense, you have an analytical expression for both theta_1 and theta_0. The remaining integral is the one over phi and that should be straightforward in python.



